// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// https://github.com/unlight/prisma-nestjs-graphql
generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated"
  purgeOutput            = true
  reExport               = Directories
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  fields_Scalars_from    = "graphql-scalars"
  fields_Scalars_input   = true
  fields_Scalars_output  = true
  fields_TF_from         = "type-fest"
}

// https://github.com/notiz-dev/prisma-dbml-generator#additional-options
// https://dbdiagram.io/d
generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../dbml"
  outputName = "mymodel.dbml"
}

// https://github.com/pantharshit00/prisma-docs-generator
generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

model User {
  /// @HideField({ match: 'User*@(Create|Update)*Input' })
  id            String         @id @default(cuid())
  /// @Validator.IsString()
  /// @Validator.IsNotEmpty()
  /// @Validator.IsEmail()
  /// @FieldType('Scalars.GraphQLEmailAddress')
  email         String         @unique @db.VarChar(100)
  type          UserType       @default(USER)
  role          UserRole[]
  /// @HideField({ match: 'User*@(Where)*Input', output: true })
  password      Password       @relation(fields: [passwordId], references: [id], onDelete: Cascade)
  /// @HideField({ match: 'User*@(Where)*Input', output: true })
  passwordId    String         @unique
  /// @HideField({ input: true, output: true })
  refreshTokens RefreshToken[]
  profile       Profile?
  /// @FieldType('DateTime')
  createdAt     DateTime?      @default(now())

  // @@unique(name: "fullname", fields: [firstName, lastName])
  @@index(fields: [id], type: Hash)
  @@index(fields: [email], type: Hash)
}

model Password {
  /// @HideField({ match: 'Password*@(Create|Update)*Input' })
  id       String @id @default(cuid())
  /// @Validator.IsString()
  /// @Validator.IsNotEmpty()
  password String
  user     User?

  @@index(fields: [id], type: Hash)
}

model RefreshToken {
  /// @HideField({ match: 'RefreshToken*@(Create|Update)*Input' })
  id        String    @id @default(cuid())
  isRevoked Boolean   @default(false)
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index(fields: [id], type: Hash)
}

model Profile {
  /// @HideField({ match: 'Profile*@(Create|Update)*Input' })
  id        String    @id @default(cuid())
  firstName String    @db.VarChar(50)
  lastName  String    @db.VarChar(50)
  username  String?   @unique @db.VarChar(50)
  bio       String?   @db.Text
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  /// @FieldType('DateTime')
  createdAt DateTime? @default(now())

  @@unique(name: "fullname", fields: [firstName, lastName])
  @@index(fields: [firstName], type: Hash)
  @@index(fields: [lastName], type: Hash)
  @@index(fields: [id], type: Hash)
}

model Log {
  /// @HideField({ match: 'Log*@(Create|Update)*Input' })
  id        String    @id @default(cuid())
  from      LogFrom?
  type      LogType   @default(LOG)
  /// @FieldType('JSON')
  /// @PropertyType('TF.JsonObject')
  data      Json?     @db.JsonB
  /// @FieldType('DateTime')
  createdAt DateTime? @default(now())

  // https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#block-range-index-brin
  @@index(fields: [createdAt(ops: TimestampBloomOps)], type: Brin)
  @@index(fields: [data(ops: JsonbOps)], type: Gin)
}

enum UserRole {
  ROLE_GUEST
  ROLE_USER
  ROLE_ADMIN
}

enum UserType {
  GUEST
  USER
  ADMIN
}

enum LogType {
  DEBUG
  LOG
  ERROR
  VERBOSE
  WARN
}

enum LogFrom {
  API
  APP
}
